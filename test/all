#!/usr/bin/env ruby

# all.rb [GEMFILE_DIR]
#
# Environment variable:
# GEMFILE_DIR: gemfile directory.
# EXCLUDED_DIRS: "DIR1 DIR2 .."

require 'fileutils'
require 'open3'

InvalidEnvironment = Class.new(StandardError)

def main
  exit_status = 0
  failures = []
  skipped = []
  a_gemfile_dir = specified_gemfile_dir

  gemfile_pattern = File.join('test', 'gemfiles', '*')
  gemfile_dirs = Dir.glob(gemfile_pattern)

  puts(gemfile_dirs)
  gemfile_dirs.each do |gemfile_dir|
    next if a_gemfile_dir && !gemfile_dir.include?(a_gemfile_dir)
    next if gemfile_dir_excluded?(gemfile_dir)
    File.open("#{gemfile_dir}/scenarios") do |f|
      f.each_line do |scenario|
        scenario.chomp!
        next if scenario.empty?
        begin
          run_scenario(gemfile_dir, "test/scenarios/#{scenario}")
        rescue InvalidEnvironment
          skipped << "#{gemfile_dir} test/scenarios/#{scenario}"
        rescue RuntimeError
          failures << "#{gemfile_dir} test/scenarios/#{scenario}"
        end
      end
    end
  end
  puts
  puts failures.any? ? "Done with #{failures.length} failure(s):" : "Success!"
  puts failures.map { |test| " * #{test}" }
  puts
  puts skipped.any? ? "#{skipped.length} tests were skipped in this environment:" : ""
  puts skipped.map { |test| " * #{test}" }
  return failures.length
end

def specified_gemfile_dir
  gemfile_dir = if !ARGV.empty?
                  ARGV[0]
                elsif ENV['GEMFILE_DIR']
                  ENV['GEMFILE_DIR']
                end
  gemfile_dir
end

def gemfile_dir_excluded?(gemfile_dir)
  is_excluded = false
  excluded_dirs = ENV['EXCLUDED_DIRS']
  return is_excluded unless excluded_dirs
  dir_name = File.basename(gemfile_dir)
  excluded_dirs.split.each do |excluded_dir|
    if dir_name == excluded_dir
      is_excluded = true
      break
    end
  end
  is_excluded
end

def run_scenario(gemfile_dir, scenario)
  gemfile = File.expand_path(File.join(gemfile_dir, 'Gemfile'))
  puts ''
  puts "Testing scenario #{scenario} with #{gemfile}..."

  bundle_path_dir = File.expand_path(File.join(gemfile_dir, 'vendor', 'bundle'))
  FileUtils.rm_rf(bundle_path_dir) if Dir.exist?(bundle_path_dir)
  result_file = 'test.result.log'
  install_cmd = <<-EOF
export BUNDLE_GEMFILE=#{gemfile} && \
bundle config set --local path '#{bundle_path_dir}' && \
bundle install
  EOF
  puts install_cmd
  if !system(install_cmd)
    puts "=> SKIP: Invalid environment"
    raise InvalidEnvironment
  end
  cmd = <<-EOF
export BUNDLE_GEMFILE=#{gemfile} && \
bundle exec ruby -I lib #{scenario} > #{result_file}
  EOF
  run_cmd(cmd, result_file)
end

def run_cmd(cmd, result_file)
  puts cmd
  is_ok = system(cmd)
  result = File.read(result_file)
  unless result.empty?
    puts '=> FAIL: Expected empty output but was:'
    puts "--#{result}--"
    raise RuntimeError
  end
  unless is_ok
    puts '=> FAIL: Expected zero exit status'
    raise RuntimeError
  end
  puts '=> PASS'
end

exit_status = main
exit(exit_status)
